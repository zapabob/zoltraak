Zoltraak 数理標準ドキュメンテーション
1. 基本演算
1.1. 加算
# 加算
## 概要
2つの数値を加算する

## 日本語表現
a に b を足す

## 入力
a: 数値
b: 数値

## 出力
a + b
# 減算 
## 概要
2つの数値を減算する

## 日本語表現 
a から b を引く

## 入力
a: 数値
b: 数値

## 出力
a - b
# 乗算
## 概要
2つの数値を乗算する

## 日本語表現
a に b を掛ける# 除算
## 概要
a を b で除算する

## 日本語表現
a を b で割る

## 入力
a: 数値
b: 数値 (0以外)

## 出力 
a / b


## 入力 
a: 数値
b: 数値

## 出力
a * b

# 三角関数 - sine
## 概要
角度の正弦を計算する
# 指数関数
## 概要
指定の底の指数関数を計算する

## 日本語表現
底 base の e の x 乗を求める

## 入力
base: 底 
x: 指数

## 出力# 対数関数
## 概要
指定の底の対数を計算する

## 日本語表現
数値 x の底 base の対数を求める 

## 入力
base: 底
x: 対象の数値 (0より大きい)

## 出力
log_base(x)
base^x
# 点
## 概要
平面上の位置を表す点

## 日本語表現
(x, y) の点

## 入力
x: 横座標
y: 縦座標

## 出力
平面上の点
# 線分
## 概要
2点間を結ぶ直線の一部

## 日本語表現
点 A から点 B へ向かう線分

## 入力 
A: 始点の座標 (x1, y1)
B: 終点の座標 (x2, y2)

## 出力
点 A から点 B # 角度
## 概要
2つの交差する直線の成す角度

## 日本語表現
線分 AB と線分 CD の成す角度

## 入力
A: 線分AB の始点座標 (x1, y1)
B: 線分AB の終点座標 (x2, y2)
C: 線分CD の始点座標 (x3, y3) 
D: 線分CD の終点座標 (x4, y4)
# 三角形
## 概要
3点を頂点とする閉じた図形

## 日本語表現
点 A, 点 B, 点 C を頂点とする三角形

## 入力
A: 頂点の座標 (x1, y1)
B: 頂点の座標 (x2, y2)
C: 頂点の座標 (x3, y3)

## 出力
点 A, 点 B, 点 C を頂点とする三角形
## 出力
線分AB と線分CD の成す角度 (ラジアン)を結ぶ線分


# 円
## 概要
中心と半径で定義される閉じた図形

## 日本語表現
中心が (x, y) で半径が r である円

## 入力
x: 中心のx座標
y: 中心のy座標 
r: 半径# ベクトル
## 概要
大きさと向きを持つ量

## 日本語表現
(a, b) ベクトル

## 入力
a: x成分
b: y成分 

## 出力
平面上のベクトル

## 出力
中心が (x, y) で半径が r である円
# ベクトル
## 概要
大きさと向きを持つ量

## 日本語表現
(a, b) ベクトル

## 入力
a: x成分
b: y成分 

## 出力
平面上のベクトル
# 行列
## 概要
数値を格子状に配置したデータ構造

## 日本語表現
[a11, a12, ..., a1n]
[a21, a22, ..., a2n]
...
[am1, am2, ..., amn] の行列

## 入力
a11, a12, ..., a1n
a21, a22, ..., a2n
...
am1, am2, ..., amn

## 出力
m行n列の行列
# 固有値
## 概要
ある行列に対する特別な固有の数値

## 日本語表現
行列 A の固有値

## 入力
A: 正方行列

## 出力
行列 A の固有値のリスト# 固有値
## 概要
ある行列に対する特別な固有の数値

## 日本語表現
行列 A の固有値

## 入力
A: 正方行列

## 出力
行列 A の固有値のリスト

# 微分
## 概要
ある関数の微小な変化量を求める

## 日本語表現
関数 f(x) の x に関する微分

## 入力
f(x): 微分する関数
x: 微分する変数

## 出力
f(x)のx に関する微分


# 偏微分
## 概要
多変数関数の特定の変数に関する微分

## 日本語表現
関数 f(x, y) の x に関する偏微分

## 入力 
f(x, y): 偏微分する関数
x: 偏微分する変数# 積分
## 概要
ある区間の関数の面積を求める

## 日本語表現
関数 f(x) の a から b までの積分

## 入力
f(x): 積分する関数 
a: 積分下限
b: 積分上限  

## 出力
∫_a^b f(x) dx


## 出力
f(x, y)のxに関する偏微分
# 重積分
## 概要
多変数関数の面積や体積を求める

## 日本語表現
関数 f(x, y) の a から b まで, c から d までの重積分 

## 入力
f(x, y): 積分する関数
a, b: 外側の積分範囲
c, d: 内側の積分範囲

## 出力
∫_a^b ∫_c^d f(x, y) dydx
# 確率
## 概要
事象が起こる割合

## 日本語表現
事象 A が起こる確率

## 入力
A: 対象の事象

## 出力
事象 A が起こる確率 (0から1の値)

# 期待値
## 概要
確率変数の平均値

## 日本語表現
確率変数 X の期待値

## 入力
X: 確率変数

## 出力
確率変数 X の期待値
# 分散
## 概要
確率変数のばらつきの度合い

## 日本語表現
確率変数 X の分散

## 入力
X: 確率変数

## 出力
確率変数 X の分散

# 標準偏差
## 概要
分散の正の平方根

## 日本語表現
確率変数 X の標準偏差 

## 入力
X: 確率変数

## 出力
確率変数 X の標準偏差# 1階常微分方程式
## 概要
1階の微分方程式で変数が時間 t のみ

## 日本語表現
微分方程式 dy/dt = f(t, y)

## 入力
f(t, y): 右辺の関数
y0: 初期条件 y(t0) = y0
t0: 初期時刻
t: 求めたい時刻

## 出力
時刻 t における解 y(t)

# 2階常微分方程式
## 概要 
2階の微分方程式で変数が時間 t のみ

## 日本語表現
微分方程式 d^2y/dt^2 = f(t, y, dy/dt)

## 入力
f(t, y, dy/dt): 右辺の関数
y0: 初期条件 y(t0) = y0
y0_dot: 初期条件 dy/dt(t0) = y0_dot 
t0: 初期時刻
t: 求めたい時刻

## 出力
時刻 t における解 y(t)

# フーリエ級数
## 概要
周期関数を三角関数の無限級数で表す

## 日本語表現
関数 f(t) のフーリエ級数展開

## 入力
f(t): 周期関数
T: 周期
t: 時間

## 出力
f(t)のフーリエ級数展開

# フーリエ変換
## 概要
非周期関数をスペクトル表示する

## 日本語表現
関数 f(t) のフーリエ変換

## 入力
f(t): 非周期関数

## 出力# 離散フーリエ変換
## 概要
離散的なデータをスペクトル表示する

## 日本語表現
離散信号 x[n] の離散フーリエ変換

## 入力
x[n]: 離散信号 (n = 0, 1, ..., N-1)

## 出力
x[n]の離散フーリエ変換
f(t)のフーリエ変換
# 複素数
## 概要
実数と虚数の組み合わせ

## 日本語表現
a + bi の複素数

## 入力
a: 実部
b: 虚部

## 出力
a + bi の複素数
# 複素平面
## 概要
複素数を平面上に表示する

## 日本語表現
複素数 a + bi を複素平面上にプロットする

## 入力
a: 実部
b: 虚部

## 出力
複素数 a + bi を複素平面上に表示
# 複素函数
## 概要
複素数を複素数に対応付ける関数

## 日本語表現
複素変数 z に対する複素函数 f(z)

## 入力
z: 複素数

## 出力
複素数 f(z)
# 数値積分
## 概要
関数の数値的な積分

## 日本語表現
関数 f(x) の a から b までの数値積分

## 入力
f(x): 積分する関数
a: 積分下限
b: 積分上限
method: 積分手法 (台形rule, シンプソンの公式など)

## 出力
数値積分の結果

# 最小二乗法
## 概要
データに最も適合する関数を求める

## 日本語表現
データ (x_i, y_i) に対する最小二乗近似

## 入力
x_i: 自変数データ
y_i: 従属変数データ
model: 近似モデル関数 (線形, 2次, 指数など)

## 出力
最小二乗近似の係数
# Newton-Raphson法
## 概要
方程式の数値解を求める

## 日本語表現
方程式 f(x) = 0 の数値解

## 入力
f(x): 方程式の左辺
f'(x): f(x)の導関数 
x0: 初期値
tol: 許容誤差

## 出力
方程式の解
# Runge-Kutta法
## 概要
常微分方程式の数値解法

## 日本語表現
常微分方程式 dy/dt = f(t, y) の数値解

## 入力
f(t, y): 常微分方程式の右辺
y0: 初期条件 y(t0) = y0
t0: 初期時刻
t: 求める時刻
dt: 刻み幅

## 出力
時刻 t における数値解 y(t)

# 線形計画法
## 概要
線形制約下での最適化

## 日本語表現
線形目的関数の最小化または最大化

## 入力
c: 目的関数の係数ベクトル
A: 制約条件の係数行列
b: 制約条件の定数ベクトル

## 出力
最適化された変数の値
最適値

# 非線形計画法
## 概要
非線形制約下での最適化

## 日本語表現
非線形目的関数の最小化または最大化 

## 入力
f(x): 非線形目的関数
g(x): 非線形制約条件
x0: 初期値
tol: 許容誤差

## 出力
最適化された変数の値
最適値

# 遺伝的アルゴリズム
## 概要
大域的最適解を求める確率的手法

## 日本語表現
目的関数の大域的最適化

## 入力
f(x): 目的関数
x_range: 変数の探索範囲
pop_size: 個体数
mutation_rate: 突然変異率
max_iter: 最大世代数

## 出力
大域的最適解

| 日本語表現 | 英語概念 |
| --- | --- |
| 足す | Add |
| 引く | Subtract |
| 掛ける | Multiply |
| 割る | Divide |
| 微分 | Differentiation |
| 積分 | Integration |
| 行列 | Matrix |
| 点 | Point |
| 線分 | Line Segment |
| 角度 | Angle |
| 三角形 | Triangle |
| 円 | Circle |
| ベクトル | Vector |
| 固有値 | Eigenvalue |
| 固有ベクトル | Eigenvector |
# 加算API
def 足す(a, b):
    """
    2つの数値を加算する

    Args:
        a (float): 加算する数値
        b (float): 加算する数値

    Returns:
        float: a + b
    """
    return a + b

そうですね、Zoltraakを利用する人が数学や物理の知識はあるものの、プログラミングの知識が不足している場合、以下のような配慮が必要になります。

## 1. 簡単な言語構造の採用
- C言語のような低レベルな言語構造ではなく、よりシンプルな言語構造を採用する
- 変数宣言やコントロールフロー、関数呼び出しなどは直観的で理解しやすいものを使う

## 2. オブジェクト指向の徹底
- 数学的概念をクラスとして表現し、それらを組み合わせて使えるようにする
- 複雑な計算はクラスのメソッドにカプセル化し、ユーザーに見せない

## 3. 例外処理の自動化
- 数値計算時のエラー処理などは、ライブラリ内部で適切に処理し、ユーザーに見せない
- 分かりやすいエラーメッセージを表示し、原因を特定しやすくする

## 4. 豊富なサンプルコード
- 数学的概念の使い方を示すサンプルコードを多数用意する
- ユーザーが参考にしやすい形式(notebook形式など)で提供する

## 5. 丁寧なドキュメンテーション
- 関数の入出力仕様や使用例を詳細に説明する
- 数学的背景の説明も併せて行い、ユーザーの理解を深める

## 6. ユーザサポートの充実
- ユーザーフォーラムの設置や、Q&Aの公開など、ユーザーサポート体制を整備する
- ユーザーの質問に丁寧に回答し、ライブラリの使いやすさを高める

このように、プログラミング経験の乏しいユーザーでも直感的に使えるよう、Zoltraakのライブラリ設計と運用に配慮することが重要です。
数学的知識はあるものの、アルゴリズムやオブジェクト指向の理解が不足しているユーザーにも優しいライブラリを目指すべきでしょう。



## 日本語表現
angle の sine を求める 

## 入力
angle: 角度 (ラジアン)

## 出力
angle の正弦
